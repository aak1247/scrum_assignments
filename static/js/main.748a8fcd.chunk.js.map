{"version":3,"sources":["stores/TodoStore.ts","stores/CommonStore.ts","stores/index.ts","partials/devTools.tsx","components/todo/Todo.tsx","components/todoModal/TodoModal.tsx","components/todoList/TodoList.tsx","pages/TodoPage.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["stores_TodoStore","TodoStore","this","todos","mobx_module","array","Object","defineProperty","prototype","filter","todo","done","addNewTodo","data","concat","removeDoneTodo","id","newTodo","doneTodos","unfinishedTodos","clearDone","addAll","map","d","_a","apply","moveToDone","doneOne","delNewTodo","doneAll","Promise","length","includes","forEach","ids_1","tslib_es6","stores_CommonStore","CommonStore","locale","changeLanguage","newLocale","stores","common","devTools_MobxDevTools","_super","MobxDevTools","renderDevTool","render","react","props","children","formatTime","time","moment","fromNow","todo_Todo","index_module","list","Item","key","className","typography","Text","content","createdTime","icon","type","theme","onClick","twoToneColor","todoModal_TodoModal","setContent","openNotificationWithIcon","notification","message","description","modal","title","visible","onOk","onSave","onCancel","footer","es_button","e","undefined","Math","floor","random","Date","sent","save","es_form","onSubmit","input","prefix","style","color","placeholder","value","onChange","target","TodoList_Title","Title","todoList_TodoList","showAdd","setShowAdd","header","badge","count","overflowCount","level","canAdd","dataSource","renderItem","item","emptyText","Header","layout","Content","Footer","src_pages_TodoPage","TodoPage","_this","call","state","createTime","display","flexDirection","justifyContent","boxShadow","backgroundColor","padding","row","gutter","minHeight","col","xs","sm","md","lg","xl","xxl","textAlign","core_decorators","browserHistory","esm_history","routerStore","mobx_react_router","App_history","src_App_0","App","react_router","history","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.748a8fcd.chunk.js","sourcesContent":["import { ITodo, ITodoStore } from './../interfaces/index';\nimport { observable, action, computed } from 'mobx';\n\nclass TodoStore implements ITodoStore {\n  @observable todos: (ITodo)[] = observable.array([]);\n\n\n  @computed get unfinishedTodos(): (ITodo)[] {\n    return this.todos.filter(todo => !todo.done)\n  }\n\n  @computed get doneTodos(): (ITodo)[] {\n    return this.todos.filter(todo => todo.done)\n  }\n\n  @action public async addNewTodo(data: ITodo) {\n    data = observable(data)\n    this.todos = this.todos.concat([data])\n  }\n\n  @action public async removeDoneTodo(id: number) {\n    const newTodo = this.doneTodos.filter(todo => todo.id != id)\n    this.todos = observable.array([...newTodo, ...this.unfinishedTodos])\n  }\n\n  @action public async clearDone() {\n    this.todos = observable.array(this.unfinishedTodos)\n  }\n\n  @action public async addAll(data: ITodo[]) {\n    data = data.map(d => observable(d))\n    this.todos = this.todos.concat(...data)\n  }\n\n  @action public async moveToDone(id: number) {\n    const doneOne = this.unfinishedTodos.filter(todo => todo.id === id)[0]\n    if (doneOne) {\n      doneOne.done = true\n    }\n  }\n\n  @action public async delNewTodo(id: number) {\n    this.todos = this.todos.filter(todo => todo.id !== id)\n  }\n\n  public async doneAll(data: ITodo[]): Promise<void>;\n  public async doneAll(data: number[]): Promise<void>;\n\n  @action public async doneAll(data: any[]): Promise<void> {\n    if (!data.length) {\n      return;\n    }\n    if (typeof (data[0]) == 'number') {\n      this.unfinishedTodos.filter(todo => data.includes(todo.id)).forEach(todo => todo.done = true);\n    } else {\n      const ids = data.map(d => d.id);\n      this.unfinishedTodos.filter(todo => ids.includes(todo.id)).forEach(todo => todo.done = true)\n    }\n  }\n\n}\n\n\nexport default TodoStore;","import { observable, action } from 'mobx';\n\n\nclass CommonStore {\n  @observable locale:string = \"zh\"\n  @action async changeLanguage(newLocale: string) {\n    this.locale = newLocale\n  }\n}\n\nexport default CommonStore;","import TodoStore from \"./TodoStore\";\nimport CommonStore from './CommonStore';\n\nconst rootStore: any = {\n  todo: new TodoStore(),\n  common: new CommonStore()\n}\n\nexport default rootStore","import * as React from 'react';\n\nexport class MobxDevTools extends React.Component<{}, {}> {\n\n  renderDevTool() {\n    if (process.env.NODE_ENV !== 'production') {\n      const DevTools = require('mobx-react-devtools').default;\n      return (<DevTools />);\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n      { this.props.children }\n        { this.renderDevTool() }\n      </div>\n    );\n  }\n}","import * as React from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { List, Typography, Icon } from \"antd\";\nimport * as moment from \"moment\";\n\nimport \"./Todo.scss\";\nimport { ITodoPropsWithStore, ITodoProps } from \"../../interfaces\";\n\nconst TodoWithStore = (props: ITodoPropsWithStore) => {\n  return (\n    <List.Item key={props.id} className=\"todo\">\n      <Typography.Text className=\"todo_left\">{props.content}</Typography.Text>\n      <Typography.Text className=\"todo_middle\">\n        {formatTime(props.createdTime)}\n      </Typography.Text>\n      <div className=\"todo_icons\">\n        {props.done || (\n          <Icon\n            type=\"minus-circle\"\n            theme=\"twoTone\"\n            onClick={() => props.todo.delNewTodo(props.id)}\n          />\n        )}\n        {props.done && (\n          <Icon\n            type=\"delete\"\n            theme=\"twoTone\"\n            twoToneColor=\"#52c41a\"\n            onClick={() => props.todo.removeDoneTodo(props.id)}\n          />\n        )}\n\n        {props.done || (\n          <Icon type=\"check\" onClick={() => props.todo.moveToDone(props.id)} />\n        )}\n      </div>\n    </List.Item>\n  );\n};\n\nconst formatTime = (time: Date): string => {\n  return moment(time).fromNow();\n};\n\nconst Todo: React.FC<ITodoProps> = inject(\"todo\")(observer(TodoWithStore));\nexport default Todo;\n","import * as React from \"react\";\nimport { Modal, Form, Input, Icon, notification, Button } from \"antd\";\nimport { inject, observer } from \"mobx-react\";\n\nimport {\n  ITodoModalPropsWithStore,\n  ITodoModalProps,\n  ITodo\n} from \"src/interfaces\";\n\nconst TodoModalWithStore = (props: ITodoModalPropsWithStore) => {\n  let [content, setContent] = React.useState(\"\");\n  const save = async (content: string) => {\n    let todo: ITodo = {\n      id: Math.floor(Math.random() * 10000),\n      content,\n      createdTime: new Date(),\n      done: false\n    };\n    setContent(\"\");\n    await props.todo.addNewTodo(todo);\n    openNotificationWithIcon();\n  };\n\n  const onConfirm = (e: React.MouseEvent) => {\n    save(content);\n    props.onSave(e);\n    props.onCancel(e);\n  };\n\n  const openNotificationWithIcon = () => {\n    notification[\"success\"]({\n      message: \"Add success!\",\n      description: \"Your new task has been added to list.\"\n    });\n  };\n  return (\n    <Modal\n      title=\"Add a task\"\n      visible={props.visible}\n      onOk={props.onSave}\n      onCancel={props.onCancel}\n      footer={[\n        <Button key=\"back\" onClick={props.onCancel}>\n          Cancel\n        </Button>,\n        <Button key=\"submit\" type=\"primary\" onClick={onConfirm}>\n          Add\n        </Button>\n      ]}\n    >\n      <Form onSubmit={props.onSave} className=\"login-form\">\n        <Form.Item>\n          <Input\n            prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n            placeholder=\"Task content\"\n            value={content}\n            onChange={e => {\n              setContent(e.target.value);\n            }}\n          />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nconst TodoModal: React.FC<ITodoModalProps> = inject(\"todo\")(TodoModalWithStore);\n\nexport default TodoModal;\n","import { List, Badge, Typography, Button, Modal } from \"antd\";\nimport * as React from \"react\";\n\nimport { ITodoListProps } from \"src/interfaces\";\nimport Todo from \"../todo/Todo\";\nimport \"./TodoList.scss\";\nimport TodoModal from \"../todoModal/TodoModal\";\n\nconst { Title } = Typography;\n\nconst TodoList = (props: ITodoListProps) => {\n  let [showAdd, setShowAdd] = React.useState(false);\n  function showAddModel() {\n    setShowAdd(true);\n  }\n  function save() {}\n  function cancelAdd() {\n    setShowAdd(false);\n  }\n  return (\n    <List\n      className=\"todo-list\"\n      header={\n        <div className=\"todo-list_header\">\n          <Badge count={props.todos.length} overflowCount={10}>\n            <Title level={4} className=\"todo-list_title\">\n              {props.title}\n            </Title>\n          </Badge>\n\n          {props.canAdd && (\n            <Button type=\"primary\" icon=\"plus\" onClick={showAddModel} />\n          )}\n        </div>\n      }\n      dataSource={props.todos}\n      renderItem={item => <Todo {...item} />}\n      locale={{\n        emptyText: \"No tasks\"\n      }}\n    >\n      <TodoModal visible={showAdd} onSave={save} onCancel={cancelAdd} />\n    </List>\n  );\n};\n\nexport default TodoList;\n","import * as React from \"react\";\nimport { ITodoPageProps } from \"../interfaces\";\n\nimport \"./TodoPage.scss\";\nimport { Layout, Typography, Col, Row } from \"antd\";\nimport { autobind } from \"core-decorators\";\nimport { observer, inject } from \"mobx-react\";\nimport TodoList from \"src/components/todoList/TodoList\";\n\nconst { Header, Content, Footer } = Layout;\n\n@inject(\"common\", \"todo\")\n@observer\n@autobind\nclass TodoPage extends React.Component<ITodoPageProps, {}> {\n  state = {\n    count: 0\n  };\n\n  constructor(props: ITodoPageProps) {\n    super(props);\n    props.todo.addAll([\n      {\n        id: 0,\n        content: \"Restful API homework\",\n        createTime: new Date()\n      },\n      {\n        id: 1,\n        content: \"React Todos homework\",\n        createTime: new Date()\n      }\n    ]);\n  }\n\n  public render() {\n    const { Title } = Typography;\n    return (\n      <Layout className=\"layout todo-page\">\n        <Header\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            boxShadow: \"1px 0 5px 1px rgba(100,100,100,0.9)\",\n            backgroundColor: \"#2196f3\"\n          }}\n        >\n          <Title\n            level={2}\n            style={{\n              color: \"white\"\n            }}\n          >\n            Todo of Today\n          </Title>\n        </Header>\n        <Content style={{ padding: \"50px\" }}>\n          <Row\n            // align=\"top\"\n            // justify=\"start\"\n            gutter={8}\n            style={{\n              padding: 24,\n              minHeight: 280\n            }}\n          >\n            <Col\n              xs={2}\n              sm={4}\n              md={2}\n              lg={3}\n              xl={3}\n              xxl={3}\n              className=\"todo-page_col\"\n            />\n            <Col\n              xs={20}\n              sm={16}\n              md={10}\n              lg={8}\n              xl={8}\n              xxl={8}\n              className=\"todo-page_col\"\n            >\n              <TodoList\n                todos={this.props.todo.unfinishedTodos}\n                title=\"Todo\"\n                className=\"todo-page_unfinished\"\n                canAdd={true}\n              />\n            </Col>\n            <Col\n              xs={2}\n              sm={4}\n              md={1}\n              lg={1}\n              xl={1}\n              xxl={1}\n              className=\"todo-page_col\"\n            />\n            <Col\n              xs={2}\n              sm={4}\n              md={1}\n              lg={1}\n              xl={1}\n              xxl={1}\n              className=\"todo-page_col\"\n            />\n            <Col\n              xs={20}\n              sm={16}\n              md={10}\n              lg={8}\n              xl={8}\n              xxl={8}\n              className=\"todo-page_col\"\n            >\n              <TodoList\n                todos={this.props.todo.doneTodos}\n                title=\"Done\"\n                className=\"todo-page_done\"\n                canAdd={false}\n              />\n            </Col>\n          </Row>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Powered by aak1247 ©2019\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default TodoPage;\n","import * as React from \"react\";\nimport { Router, Route, Switch } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\nimport { Provider } from \"mobx-react\";\nimport { RouterStore, syncHistoryWithStore } from \"mobx-react-router\";\n\nimport \"./App.css\";\nimport rootStore from \"./stores\";\nimport { MobxDevTools } from \"./partials\";\nimport TodoPage from \"./pages/TodoPage\";\n\nconst browserHistory = createBrowserHistory();\nconst routerStore = new RouterStore();\nconst history = syncHistoryWithStore(browserHistory, routerStore);\n\nclass App extends React.Component<any, {}> {\n  public render() {\n    return (\n      <Provider {...rootStore}>\n        <MobxDevTools>\n          <Router history={history}>\n            <Switch>\n              <Route path=\"/\" component={TodoPage} />\n            </Switch>\n          </Router>\n        </MobxDevTools>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport \"./index.scss\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}